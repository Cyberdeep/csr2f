#!/usr/bin/python3
# -*- coding: utf-8 *-*
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# Developed by Nicolas Crocfer (http://www.shatter.fr)

import os
import glob
import json
import math
from datetime import datetime
import time

from core.exceptions import UpdateException

EXPLOITS_REMOTE_CONF = "https://raw.github.com/ncrocfer/csr2f/master/exploits.json"
EXPLOITS_REMOTE_DIR = "https://raw.github.com/ncrocfer/csr2f/master/exploits/"

class ExploitsManager:

    def __init__(self):
        self.exploits = self.load_exploits()
        self.remote_infos = {}
        self.conf = {}
        try:
            with open("exploits.json", "r", encoding="utf-8") as f:
                self.conf = json.load(f)
        except IOError:
            om.error("Error during import exploits.json file")

    def load_exploits(self):
        exploits_path = {e[9:-5]:os.path.realpath(e) for e in glob.glob('exploits/*.csrf')}
        exploits = {}

        for exploit_id, exploit_tpl in exploits_path.items():
            config = {}
            exec(open(exploit_tpl).read(), config)

            exploits[exploit_id] = {}
            exploits[exploit_id]['name'] = config['NAME']
            exploits[exploit_id]['description'] = None if 'DESCRIPTION' not in config else config['DESCRIPTION']
            exploits[exploit_id]['author'] = None if 'AUTHOR' not in config else config['AUTHOR']
            exploits[exploit_id]['author_url'] = None if 'AUTHOR_URL' not in config else config['AUTHOR_URL']
            exploits[exploit_id]['date'] = None if 'DATE' not in config else config['DATE']
            exploits[exploit_id]['method'] = config['METHOD']
            exploits[exploit_id]['path'] = config['PATH']
            exploits[exploit_id]['form'] = {} if 'FORM' not in config else config['FORM']
            exploits[exploit_id]['params'] = [] if 'PARAMS' not in config else config['PARAMS']
            exploits[exploit_id]['template'] = exploit_tpl

        return exploits

    def find(self, exploit_id):

        for key, exploit in self.exploits.items():
            if str(key) == str(exploit_id):
                return exploit

        return None

    def get_number(self):
        return len(self.exploits)

    def update_exploits_list(self):
        exploits = list(range(int(self.conf['last_exploit']) + 1, int(self.remote_infos['last_exploit']) + 1))
        exploits_str = "exploits" if len(exploits) > 1 else "exploit"
        om.info("{} new {} to download".format(len(exploits), exploits_str))
        om.info("It may take a few seconds, please wait.\n")
        om.info("Downloading...\n")

        for exploit_id in exploits :
            import requests
            url = "{}{}.csrf".format(EXPLOITS_REMOTE_DIR, exploit_id)

            try:
                r = requests.get(url)
            except requests.exceptions.ConnectionError:
                raise UpdateException

            # import new exploits
            new_file = "exploits/{}.csrf".format(exploit_id)
            try:
                with open(new_file, mode="w", encoding="utf-8") as f:
                    f.write(r.text)
            except IOError:
                raise UpdateException

        # update local conf
        self.conf["last_exploit"] = exploits[-1]
        self.conf["last_update"] = int(time.time())
        try:
            with open("exploits.json", mode="w", encoding="utf-8") as f:
                json.dump(self.conf, f, indent=2)
        except IOError:
            raise UpdateException

        # update exploits list within the script
        self.exploits = self.load_exploits()

        return len(exploits)

    def get_remote_last_exploit(self):
        try:
            import requests
        except ImportError:
            return -1

        try:
            r = requests.get(EXPLOITS_REMOTE_CONF)
        except requests.exceptions.ConnectionError:
            return -2

        self.remote_infos = r.json()
        return self.remote_infos['last_exploit']

    def get_local_last_exploit(self):
        return self.conf['last_exploit']

    def get_last_update(self):
        last_update = self.conf['last_update']
        day = datetime.fromtimestamp(last_update).day
        if 4 <= day <= 20 or 24 <= day <= 30:
            suffix = "th"
        else:
            suffix = ["st", "nd", "rd"][day % 10 - 1]
        return datetime.fromtimestamp(last_update).strftime("%b %d{} %Y at %H:%M".format(suffix))
    
    def set_last_update(self):
        self.conf["last_update"] = int(time.time())
        try:
            with open("exploits.json", mode="w", encoding="utf-8") as f:
                json.dump(self.conf, f, indent=2)
        except IOError:
            raise UpdateException

        return True