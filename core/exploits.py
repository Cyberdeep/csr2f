#!/usr/bin/python3
# -*- coding: utf-8 *-*
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# Developed by Nicolas Crocfer (http://www.shatter.fr)

import os
import glob

class ExploitsManager:

    def __init__(self):
        self.exploits = self.load()

    def load(self):
        exploits_path = {e[9:-5]:os.path.realpath(e) for e in glob.glob('exploits/*.csrf')}
        exploits = {}

        for exploit_id, exploit_tpl in exploits_path.items():
            config = {}
            exec(open(exploit_tpl).read(), config)

            exploits[exploit_id] = {}
            exploits[exploit_id]['name'] = config['NAME']
            exploits[exploit_id]['description'] = None if 'DESCRIPTION' not in config else config['DESCRIPTION']
            exploits[exploit_id]['author'] = None if 'AUTHOR' not in config else config['AUTHOR']
            exploits[exploit_id]['author_url'] = None if 'AUTHOR_URL' not in config else config['AUTHOR_URL']
            exploits[exploit_id]['method'] = config['METHOD']
            exploits[exploit_id]['path'] = config['PATH']
            exploits[exploit_id]['form'] = {} if 'FORM' not in config else config['FORM']
            exploits[exploit_id]['params'] = [] if 'PARAMS' not in config else config['PARAMS']
            exploits[exploit_id]['template'] = exploit_tpl

        return exploits

    def find(self, exploit_id):

        for key, exploit in self.exploits.items():
            if str(key) == str(exploit_id):
                return exploit

        return None

    def get_number(self):
        return len(self.exploits)